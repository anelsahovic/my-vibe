// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  kindeId  String  @unique
  email    String  @unique
  username String  @unique
  name     String?
  image    String?
  bio      String?
  location String?
  website  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organizedEvents Event[]         @relation("OrganizedEvents") // Events organized by the user
  attendedEvents  EventAttendee[] // Relationship with events through join table

  posts    Post[]
  comments Comment[]
  likes    Like[]

  followers Follows[] @relation("following") // Users who follow this user
  following Follows[] @relation("follower") // Users this user follows

  notifications        Notification[] @relation("userNotifications") // Notifications received by a user
  notificationsCreated Notification[] @relation("notificationCreator") // Notifications triggered by a user
}

model Event {
  id          String   @id @default(cuid()) // Unique identifier
  organizerId String
  name        String // Name of the event
  description String? // Optional description of the event
  location    String? // Optional location of the event
  startDate   DateTime // Start date and time
  endDate     DateTime // End date and time
  isOnline    Boolean  @default(false) // Indicator for online or in-person
  capacity    Int? // Maximum number of participants
  price       Float? // Ticket price (if applicable)
  createdAt   DateTime @default(now()) // Record creation timestamp
  updatedAt   DateTime @updatedAt // Automatically updated on record change

  // Relations
  organizer    User            @relation("OrganizedEvents", fields: [organizerId], references: [id]) // Organizer of the event
  attendees    EventAttendee[] // Relationship with attendees through join table
  Notification Notification[]
}

model EventAttendee {
  eventId   String
  userId    String
  createdAt DateTime @default(now()) // When the user joined the event

  // Relations
  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
  @@index([eventId, userId])
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade) // cascade delete means delete all posts if author is deleted
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime @default(now())

  // Relations
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId, postId]) // composite index for faster queries
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId]) // this prevents same user liking post twice
  @@index([userId, postId]) // composite index for faster queries
}

model Follows {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  // Relations
  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
  @@index([followerId, followingId]) // composite index for faster queries
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  creatorId String
  type      NotificationType
  read      Boolean          @default(false)
  postId    String?
  eventId   String?
  commentId String?
  createdAt DateTime         @default(now())

  // Relations
  user    User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post    Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  event   Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
  EVENT
}
